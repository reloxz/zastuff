-- VFlyy (client-side)
-- Fly using MoveDirection, prevents falling, toggle with E

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Fly state
local flying = false
local speed = 50
local boostSpeed = 100
local vertical = 0

-- Toggle fly state
local function setFlyState(state)
	flying = state
	if flying then
		humanoid.PlatformStand = false
		humanoid:ChangeState(Enum.HumanoidStateType.Physics)
	else
		humanoid:ChangeState(Enum.HumanoidStateType.Freefall)
		rootPart.Velocity = Vector3.zero
	end
end

-- Toggle with E
UserInputService.InputBegan:Connect(function(input, gp)
	if gp then return end
	if input.KeyCode == Enum.KeyCode.E then
		setFlyState(not flying)
	end
	if input.KeyCode == Enum.KeyCode.Space then vertical = 1 end
	if input.KeyCode == Enum.KeyCode.LeftControl then vertical = -1 end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.KeyCode == Enum.KeyCode.Space or input.KeyCode == Enum.KeyCode.LeftControl then
		vertical = 0
	end
end)

-- Fly loop (overrides gravity)
RunService.RenderStepped:Connect(function(dt)
	if not flying then return end

	local currentSpeed = UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) and boostSpeed or speed
	local moveDir = humanoid.MoveDirection * currentSpeed

	-- Override Y completely to stop falling
	moveDir = Vector3.new(moveDir.X, vertical * currentSpeed, moveDir.Z)

	rootPart.Velocity = moveDir
end)

-- Allow server !unfly to disable
getgenv().DisableFly = function()
	setFlyState(false)
end

print("[Client Fly]: Loaded. Press E to toggle fly.")
