-- Client-Side Music Visualizer (BarAPI)
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local MusicVisEvent = ReplicatedStorage:WaitForChild("MusicVisEvent")

-- Find all sounds in the workspace and character
local function getAllSounds()
    local sounds = {}
    
    -- Get sounds from character
    for _, obj in ipairs(char:GetDescendants()) do
        if obj:IsA("Sound") and obj.IsPlaying then
            table.insert(sounds, obj)
        end
    end
    
    -- Get sounds from workspace
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Sound") and obj.IsPlaying then
            -- Only include sounds within reasonable distance
            local soundParent = obj.Parent
            if soundParent and soundParent:IsA("BasePart") then
                local distance = (soundParent.Position - hrp.Position).Magnitude
                if distance < 100 then
                    table.insert(sounds, obj)
                end
            else
                table.insert(sounds, obj)
            end
        end
    end
    
    return sounds
end

-- Simulate frequency bands from PlaybackLoudness
-- Real frequency analysis isn't directly available in Roblox, 
-- but we can simulate it using loudness + sound properties
local function getFrequencyBands(sound)
    local loudness = sound.PlaybackLoudness
    local timePosition = sound.TimePosition
    local timeLength = sound.TimeLength
    
    -- Use sound properties to influence frequency distribution
    local pitch = sound.Pitch or 1
    local volume = sound.Volume or 0.5
    
    local bands = {}
    local numBands = 16
    
    for i = 1, numBands do
        local position = (i - 1) / (numBands - 1) -- 0 to 1
        
        -- Create time-based variations for each frequency band
        local timeOffset = timePosition * (1.5 + i * 0.2)
        local wave1 = math.abs(math.sin(timeOffset))
        local wave2 = math.abs(math.cos(timeOffset * 1.3 + i * 0.5))
        
        local bandIntensity
        
        -- Left side = BASS (affected by lower pitch)
        if position <= 0.33 then
            local bassStrength = 1 - (position / 0.33)
            -- Bass is stronger with lower pitch, slower waves
            local pitchFactor = math.clamp(1.5 - pitch * 0.3, 0.7, 1.3)
            bandIntensity = loudness * pitchFactor * (0.5 + wave1 * 0.5) * (0.7 + bassStrength * 0.3)
        
        -- Middle = MIDS (balanced)
        elseif position <= 0.66 then
            local transitionBlend = (position - 0.33) / 0.33
            local bassComponent = loudness * (1 - transitionBlend) * (0.6 + wave1 * 0.4)
            local highComponent = loudness * transitionBlend * (0.5 + wave2 * 0.5)
            bandIntensity = (bassComponent + highComponent) * 0.8
        
        -- Right side = HIGHS (affected by higher pitch)
        else
            local highStrength = (position - 0.66) / 0.34
            -- Highs are stronger with higher pitch, faster waves
            local pitchFactor = math.clamp(pitch * 0.8, 0.6, 1.2)
            bandIntensity = loudness * pitchFactor * (0.4 + wave2 * 0.6) * (0.6 + highStrength * 0.4)
        end
        
        -- Apply volume and clamp
        bandIntensity = math.clamp(bandIntensity * volume, 0, 100)
        table.insert(bands, bandIntensity)
    end
    
    return bands
end

-- Main update loop
local lastUpdate = 0
local updateRate = 1/30 -- 30 times per second

RunService.RenderStepped:Connect(function()
    local now = tick()
    if now - lastUpdate < updateRate then return end
    lastUpdate = now
    
    local sounds = getAllSounds()
    
    if #sounds > 0 then
        -- Get the loudest sound
        local primarySound = sounds[1]
        local maxLoudness = primarySound.PlaybackLoudness
        
        for _, sound in ipairs(sounds) do
            if sound.PlaybackLoudness > maxLoudness then
                primarySound = sound
                maxLoudness = sound.PlaybackLoudness
            end
        end
        
        -- Get frequency bands
        local frequencyBands = getFrequencyBands(primarySound)
        
        -- Send to server
        MusicVisEvent:FireServer(
            primarySound.SoundId,
            maxLoudness,
            hrp.Position,
            frequencyBands
        )
    else
        -- No sound playing, send zeros
        local emptyBands = {}
        for i = 1, 16 do
            table.insert(emptyBands, 0)
        end
        MusicVisEvent:FireServer("", 0, hrp.Position, emptyBands)
    end
end)
