local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local MusicVisEvent = ReplicatedStorage:WaitForChild("MusicVisEvent")

local soundAnalyzers = {}

local function setupAudioAnalyzer(sound)
	if soundAnalyzers[sound] then
		local analyzer = soundAnalyzers[sound]
		if analyzer and analyzer.Parent then
			analyzer.SpectrumEnabled = true
			return analyzer
		end
	end
	
	local analyzer = sound:FindFirstChild("AudioAnalyzer")
	if not analyzer then
		analyzer = Instance.new("AudioAnalyzer")
		analyzer.Name = "AudioAnalyzer"
		analyzer.Parent = sound
		analyzer.SpectrumEnabled = true
		
		local wire = sound:FindFirstChild("AnalyzerWire")
		if not wire then
			wire = Instance.new("Wire")
			wire.Name = "AnalyzerWire"
			wire.SourceInstance = sound
			wire.TargetInstance = analyzer
			wire.TargetName = "Input"
			wire.Parent = sound
		end
		
		print("[MusicVis] Created AudioAnalyzer and Wire for sound:", sound.Name)
	else
		analyzer.SpectrumEnabled = true
		local wire = sound:FindFirstChild("AnalyzerWire")
		if not wire then
			wire = Instance.new("Wire")
			wire.Name = "AnalyzerWire"
			wire.SourceInstance = sound
			wire.TargetInstance = analyzer
			wire.TargetName = "Input"
			wire.Parent = sound
		end
	end
	
	soundAnalyzers[sound] = analyzer
	return analyzer
end

local function getAllSounds()
	local sounds = {}
	for _, obj in ipairs(char:GetDescendants()) do
		if obj:IsA("Sound") and obj.IsPlaying then
			table.insert(sounds, obj)
		end
	end
	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:IsA("Sound") and obj.IsPlaying then
			local soundParent = obj.Parent
			if soundParent and soundParent:IsA("BasePart") then
				local distance = (soundParent.Position - hrp.Position).Magnitude
				if distance < 100 then
					table.insert(sounds, obj)
				end
			else
				table.insert(sounds, obj)
			end
		end
	end
	return sounds
end

local function getFrequencyBands(sound)
	local success, analyzer = pcall(setupAudioAnalyzer, sound)
	if not success or not analyzer then
		print("[MusicVis] Failed to setup AudioAnalyzer:", analyzer)
		analyzer = nil
	end
	
	local spectrum = nil
	if analyzer then
		local specSuccess, specResult = pcall(function()
			return analyzer:GetSpectrum()
		end)
		if specSuccess then
			spectrum = specResult
		else
			print("[MusicVis] GetSpectrum failed:", specResult)
		end
	end
	
	if not spectrum or #spectrum == 0 then
		local loudness = sound.PlaybackLoudness
		local time = sound.TimePosition
		local pitch = sound.Pitch or 1
		
		local bands = {}
		local bassWave = math.abs(math.sin(time * 2.5))
		local bassIntensity = loudness * (0.3 + bassWave * 0.5)
		
		for i = 1, 8 do
			local distanceFromLeft = 1 - ((i - 1) / 7)
			local smoothFactor = i <= 6 and 1.0 or (1.0 - (i - 6) * 0.15)
			local bandValue = bassIntensity * (0.4 + distanceFromLeft * 0.4) * smoothFactor * math.clamp(1.3 - pitch * 0.2, 0.7, 1.1)
			table.insert(bands, math.clamp(bandValue, 0, 100))
		end
		
		local highWave = math.abs(math.cos(time * 6.5))
		local highIntensity = loudness * (0.25 + highWave * 0.55)
		
		for i = 1, 8 do
			local distanceFromRight = (i - 1) / 7
			local smoothFactor = i >= 3 and 1.0 or (1.0 - (3 - i) * 0.15)
			local bandValue = highIntensity * (0.4 + distanceFromRight * 0.4) * smoothFactor * math.clamp(pitch * 0.7, 0.6, 1.0)
			table.insert(bands, math.clamp(bandValue, 0, 100))
		end
		
		return bands
	end
	
	local bands = {}
	local numBands = 16
	local spectrumLength = #spectrum
	local bassRange = math.floor(spectrumLength * 0.15)
	local highStart = math.floor(spectrumLength * 0.3)
	
	for i = 1, 8 do
		local startIdx = math.floor((i - 1) / 8 * bassRange) + 1
		local endIdx = math.floor(i / 8 * bassRange)
		local sum = 0
		local count = 0
		for j = startIdx, endIdx do
			if spectrum[j] then
				sum = sum + spectrum[j]
				count = count + 1
			end
		end
		local avgIntensity = count > 0 and (sum / count) or 0
		table.insert(bands, math.clamp(avgIntensity * 150, 0, 100))
	end
	
	local highRange = spectrumLength - highStart
	for i = 1, 8 do
		local startIdx = highStart + math.floor((i - 1) / 8 * highRange)
		local endIdx = highStart + math.floor(i / 8 * highRange)
		local sum = 0
		local count = 0
		for j = startIdx, endIdx do
			if spectrum[j] then
				sum = sum + spectrum[j]
				count = count + 1
			end
		end
		local avgIntensity = count > 0 and (sum / count) or 0
		table.insert(bands, math.clamp(avgIntensity * 120, 0, 100))
	end
	
	return bands
end

local lastUpdate = 0
local updateRate = 1/30
local lastPrimarySound = nil

RunService.RenderStepped:Connect(function()
	local now = tick()
	if now - lastUpdate < updateRate then return end
	lastUpdate = now
	
	local sounds = getAllSounds()
	
	if #sounds > 0 then
		local primarySound = sounds[1]
		local maxLoudness = primarySound.PlaybackLoudness
		
		for _, sound in ipairs(sounds) do
			if sound.PlaybackLoudness > maxLoudness then
				primarySound = sound
				maxLoudness = sound.PlaybackLoudness
			end
		end
		
		if primarySound ~= lastPrimarySound then
			print("[MusicVis] Primary sound changed to:", primarySound.Name, "SoundId:", primarySound.SoundId)
			lastPrimarySound = primarySound
		end
		
		local frequencyBands = getFrequencyBands(primarySound)
		
		MusicVisEvent:FireServer(
			primarySound.SoundId,
			maxLoudness,
			hrp.Position,
			frequencyBands
		)
	else
		if lastPrimarySound then
			print("[MusicVis] No sounds playing")
			lastPrimarySound = nil
		end
		local emptyBands = {}
		for i = 1, 16 do
			table.insert(emptyBands, 0)
		end
		MusicVisEvent:FireServer("", 0, hrp.Position, emptyBands)
	end
end)
