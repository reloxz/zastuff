-- Client-Side Music Visualizer (BarAPI)
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local MusicVisEvent = ReplicatedStorage:WaitForChild("MusicVisEvent")

-- Find all sounds in the workspace and character
local function getAllSounds()
    local sounds = {}
    
    -- Get sounds from character
    for _, obj in ipairs(char:GetDescendants()) do
        if obj:IsA("Sound") and obj.IsPlaying then
            table.insert(sounds, obj)
        end
    end
    
    -- Get sounds from workspace
    for _, obj in ipairs(workspace:GetDescendants()) do
        if obj:IsA("Sound") and obj.IsPlaying then
            -- Only include sounds within reasonable distance
            local soundParent = obj.Parent
            if soundParent and soundParent:IsA("BasePart") then
                local distance = (soundParent.Position - hrp.Position).Magnitude
                if distance < 100 then
                    table.insert(sounds, obj)
                end
            else
                table.insert(sounds, obj)
            end
        end
    end
    
    return sounds
end

-- Simulate frequency bands from PlaybackLoudness
-- Real frequency analysis isn't directly available in Roblox, 
-- but we can simulate it using loudness + sound properties
local function getFrequencyBands(sound)
    local loudness = sound.PlaybackLoudness
    local timePosition = sound.TimePosition
    local timeLength = sound.TimeLength
    
    -- Use sound properties to influence frequency distribution
    local pitch = sound.Pitch or 1
    local volume = sound.Volume or 0.5
    
    local bands = {}
    local numBands = 16
    local centerIndex = numBands / 2
    
    -- Create separate bass and high frequency patterns
    local time = timePosition
    local bassWave = math.abs(math.sin(time * 2)) -- Slow bass pattern
    local highWave = math.abs(math.cos(time * 5.5)) -- Fast high pattern
    
    -- Calculate bass and high intensities
    local bassIntensity = loudness * (0.3 + bassWave * 0.4) * math.clamp(1.3 - pitch * 0.3, 0.6, 1.2)
    local highIntensity = loudness * (0.2 + highWave * 0.5) * math.clamp(pitch * 0.7, 0.5, 1.0)
    
    for i = 1, numBands do
        local bandIntensity
        
        -- Left side (bars 1-8) = BASS frequencies
        if i <= centerIndex then
            -- Distance from far left (1 = far left, 0 = center)
            local distanceFromLeft = 1 - ((i - 1) / (centerIndex - 1))
            -- Far left bar gets full bass, decreases toward center
            bandIntensity = bassIntensity * (0.4 + distanceFromLeft * 0.6)
        
        -- Right side (bars 9-16) = HIGH frequencies
        else
            -- Distance from far right (1 = far right, 0 = center)
            local distanceFromRight = (i - centerIndex - 1) / (centerIndex - 1)
            -- Far right bar gets full highs, decreases toward center
            bandIntensity = highIntensity * (0.4 + distanceFromRight * 0.6)
        end
        
        -- Apply volume and clamp
        bandIntensity = math.clamp(bandIntensity * volume, 0, 100)
        table.insert(bands, bandIntensity)
    end
    
    return bands
end

-- Main update loop
local lastUpdate = 0
local updateRate = 1/30 -- 30 times per second

RunService.RenderStepped:Connect(function()
    local now = tick()
    if now - lastUpdate < updateRate then return end
    lastUpdate = now
    
    local sounds = getAllSounds()
    
    if #sounds > 0 then
        -- Get the loudest sound
        local primarySound = sounds[1]
        local maxLoudness = primarySound.PlaybackLoudness
        
        for _, sound in ipairs(sounds) do
            if sound.PlaybackLoudness > maxLoudness then
                primarySound = sound
                maxLoudness = sound.PlaybackLoudness
            end
        end
        
        -- Get frequency bands
        local frequencyBands = getFrequencyBands(primarySound)
        
        -- Send to server
        MusicVisEvent:FireServer(
            primarySound.SoundId,
            maxLoudness,
            hrp.Position,
            frequencyBands
        )
    else
        -- No sound playing, send zeros
        local emptyBands = {}
        for i = 1, 16 do
            table.insert(emptyBands, 0)
        end
        MusicVisEvent:FireServer("", 0, hrp.Position, emptyBands)
    end
end)
