-- Client-Side Music Visualizer with AudioAnalyzer (Real FFT)
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")

local MusicVisEvent = ReplicatedStorage:WaitForChild("MusicVisEvent")

-- Create AudioAnalyzer for real frequency analysis
local function setupAudioAnalyzer(sound)
	-- Check if AudioAnalyzer already exists
	local analyzer = sound:FindFirstChild("AudioAnalyzer")
	if not analyzer then
		analyzer = Instance.new("AudioAnalyzer")
		analyzer.Parent = sound
	end
	return analyzer
end

-- Find all sounds in the workspace and character
local function getAllSounds()
	local sounds = {}
	
	-- Get sounds from character
	for _, obj in ipairs(char:GetDescendants()) do
		if obj:IsA("Sound") and obj.IsPlaying then
			table.insert(sounds, obj)
		end
	end
	
	-- Get sounds from workspace
	for _, obj in ipairs(workspace:GetDescendants()) do
		if obj:IsA("Sound") and obj.IsPlaying then
			-- Only include sounds within reasonable distance
			local soundParent = obj.Parent
			if soundParent and soundParent:IsA("BasePart") then
				local distance = (soundParent.Position - hrp.Position).Magnitude
				if distance < 100 then
					table.insert(sounds, obj)
				end
			else
				table.insert(sounds, obj)
			end
		end
	end
	
	return sounds
end

-- Get real frequency bands using AudioAnalyzer
local function getFrequencyBands(sound)
	local analyzer = setupAudioAnalyzer(sound)
	
	-- GetSpectrum returns an array of frequency intensities
	local spectrum = analyzer:GetSpectrum()
	
	if not spectrum or #spectrum == 0 then
		-- Fallback if spectrum not available
		local emptyBands = {}
		for i = 1, 16 do
			table.insert(emptyBands, 0)
		end
		return emptyBands
	end
	
	-- Map spectrum to 16 bands (8 bass, 8 highs)
	local bands = {}
	local numBands = 16
	local spectrumLength = #spectrum
	
	-- Split spectrum into bass (low frequencies) and highs (high frequencies)
	local bassRange = math.floor(spectrumLength * 0.15) -- First 15% is bass
	local highStart = math.floor(spectrumLength * 0.3) -- Skip mids, take upper frequencies
	
	-- Get 8 bass bands from low frequencies
	for i = 1, 8 do
		local startIdx = math.floor((i - 1) / 8 * bassRange) + 1
		local endIdx = math.floor(i / 8 * bassRange)
		
		-- Average the spectrum values in this range
		local sum = 0
		local count = 0
		for j = startIdx, endIdx do
			if spectrum[j] then
				sum = sum + spectrum[j]
				count = count + 1
			end
		end
		
		local avgIntensity = count > 0 and (sum / count) or 0
		-- Boost bass slightly for visibility and convert to 0-100 scale
		table.insert(bands, math.clamp(avgIntensity * 150, 0, 100))
	end
	
	-- Get 8 high bands from high frequencies
	local highRange = spectrumLength - highStart
	for i = 1, 8 do
		local startIdx = highStart + math.floor((i - 1) / 8 * highRange)
		local endIdx = highStart + math.floor(i / 8 * highRange)
		
		-- Average the spectrum values in this range
		local sum = 0
		local count = 0
		for j = startIdx, endIdx do
			if spectrum[j] then
				sum = sum + spectrum[j]
				count = count + 1
			end
		end
		
		local avgIntensity = count > 0 and (sum / count) or 0
		-- Convert to 0-100 scale
		table.insert(bands, math.clamp(avgIntensity * 120, 0, 100))
	end
	
	return bands
end

-- Main update loop
local lastUpdate = 0
local updateRate = 1/30 -- 30 times per second

RunService.RenderStepped:Connect(function()
	local now = tick()
	if now - lastUpdate < updateRate then return end
	lastUpdate = now
	
	local sounds = getAllSounds()
	
	if #sounds > 0 then
		-- Get the loudest sound
		local primarySound = sounds[1]
		local maxLoudness = primarySound.PlaybackLoudness
		
		for _, sound in ipairs(sounds) do
			if sound.PlaybackLoudness > maxLoudness then
				primarySound = sound
				maxLoudness = sound.PlaybackLoudness
			end
		end
		
		-- Get REAL frequency bands using AudioAnalyzer
		local frequencyBands = getFrequencyBands(primarySound)
		
		-- Send to server
		MusicVisEvent:FireServer(
			primarySound.SoundId,
			maxLoudness,
			hrp.Position,
			frequencyBands
		)
	else
		-- No sound playing, send zeros
		local emptyBands = {}
		for i = 1, 16 do
			table.insert(emptyBands, 0)
		end
		MusicVisEvent:FireServer("", 0, hrp.Position, emptyBands)
	end
end)
